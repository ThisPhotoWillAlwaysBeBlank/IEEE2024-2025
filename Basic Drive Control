#include <TMCStepper.h>

// Pin Definitions for TMC2209 and Arduino Mega
#define EN_PIN         4      // Enable Pin (LOW to enable the driver)
#define DIR_PIN        3      // Direction Pin
#define STEP_PIN       2      // Step Pin
#define PDN_UART_PIN   1      // TX0 (Pin 1 on Arduino Mega, used for UART TX)
#define R_SENSE        0.11f  // Sense resistor value for TMC2209

// TMC2209 Driver Configuration
#define DRIVER_ADDRESS 0b00  // Default address for TMC2209

// UART Configuration using TX0 (Pin 1)
TMC2209Stepper driver(&Serial, R_SENSE, DRIVER_ADDRESS);

// Speed Control Variable (Microseconds per Step Delay)
int speed = 400;  // Set delay in microseconds for improved speed

void setup() {
    Serial.begin(115200);  // Initialize Serial Communication for UART

    pinMode(EN_PIN, OUTPUT);
    pinMode(DIR_PIN, OUTPUT);
    pinMode(STEP_PIN, OUTPUT);

    digitalWrite(EN_PIN, LOW);  // Enable the driver (LOW = Active)

    // Initialize the TMC2209 driver
    driver.begin();              // Initialize UART communication
    driver.toff(5);              // Enable driver in software
    driver.rms_current(1000);    // Adjust motor current to match rated value
    driver.microsteps(16);       // Set microstepping mode to 1/16
    driver.pwm_autoscale(true);  // Enable automatic current scaling

    digitalWrite(DIR_PIN, HIGH);  // Set direction forward
}

bool stopMotor = false;  // Flag to control motor operation

void loop() {
    if (stopMotor) {
        // Motor is stopped
        digitalWrite(STEP_PIN, LOW);  // Ensure motor is not stepping
        return;  // Exit the loop, stopping all motor activity
    }

    // Gradual acceleration for smoother start
    for (int i = 1000; i > speed; i -= 50) {
        digitalWrite(STEP_PIN, HIGH);
        delayMicroseconds(i);
        digitalWrite(STEP_PIN, LOW);
        delayMicroseconds(i);
    }

    // Continuous rotation at set speed
    digitalWrite(STEP_PIN, HIGH);
    delayMicroseconds(speed);
    digitalWrite(STEP_PIN, LOW);
    delayMicroseconds(speed);

    // Check for serial commands
    if (Serial.available() > 0) {
        String command = Serial.readStringUntil('\n');  // Read serial input
        command.trim();  // Remove any whitespace or newline characters

        if (command.equalsIgnoreCase("STOP")) {
            stopMotor = true;  // Set the stop flag
            Serial.println("Motor stopped.");
        } else if (command.equalsIgnoreCase("START")) {
            stopMotor = false;  // Reset the stop flag
            Serial.println("Motor started.");
        } else {
            int newSpeed = command.toInt();  // Convert command to integer
            if (newSpeed > 0) {
                speed = newSpeed;  // Update speed
                Serial.print("New speed set to: ");
                Serial.println(speed);
            }
        }
    }
}
